openapi: 3.0.0
info:
  title: Онлайн магазин
  description: API для управления товарами в онлайн магазине
  version: 1.0.1
servers:
  - url: "http://localhost:3000"
    description: Локальный сервер 3000
  - url: "http://localhost:5000"
    description: Локальный сервер 5000
  - url: "http://localhost:8080"
    description: Локальный сервер 8080
paths:
  /products:
    get:
      summary: Получение товаров
      tags:
        - Products
      operationId: getAllProducts
      responses:
        "200":
          description: Товары получены успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        "401":
          $ref: "#/components/responses/Unauthorized"                  
        "403":
          $ref: "#/components/responses/Forbidden"                  
        "500":
          $ref: "#/components/responses/InternalError"                  
        "default":
          $ref: "#/components/responses/default"                  

    post:
      summary: Создание товара
      tags:
        - Products
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"   
      responses:
        "201":
          description: Товар создан успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400": 
          $ref: "#/components/responses/BadRequest"                  
        "401":
          $ref: "#/components/responses/Unauthorized"                  
        "403":
          $ref: "#/components/responses/Forbidden"                  
        "500":
          $ref: "#/components/responses/InternalError"                  
        "default":
          $ref: "#/components/responses/default"                  
              
  /products/{product_id}:
    get:
      summary: Получение товара по его идентификатору
      tags:
        - Products
      operationId: getProductById
      parameters:
        - name: product_id
          in: path
          required: true
          description: Идентификатор товара
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "200":
          description: Товар получен успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400": 
          $ref: "#/components/responses/BadRequest"                  
        "401":
          $ref: "#/components/responses/Unauthorized"                  
        "403":
          $ref: "#/components/responses/Forbidden"                  
        "404":
          $ref: "#/components/responses/NotFound"                  
        "500":
          $ref: "#/components/responses/InternalError"                  
        "default":
          $ref: "#/components/responses/default"                  
                
    put:
      summary: Полное обновление товара по его идентификатору
      tags:
        - Products
      operationId: updateProductById
      parameters:
        - name: product_id
          in: path
          required: true
          description: Идентификатор товара
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "200":
          description: Товар обновлён успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400": 
          $ref: "#/components/responses/BadRequest"                  
        "401":
          $ref: "#/components/responses/Unauthorized"                  
        "403":
          $ref: "#/components/responses/Forbidden"                  
        "404":
          $ref: "#/components/responses/NotFound"                  
        "500":
          $ref: "#/components/responses/InternalError"                  
        "default":
          $ref: "#/components/responses/default"                  
  
    delete: 
      summary: Удаление товара по его идентификатору
      tags:
        - Products
      operationId: deleteProductById
      parameters:
        - name: product_id
          in: path
          required: true
          description: Идентификатор товара
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Успешное удаление товара
        "400": 
          description: Некорректный идентификатор
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"  
        "401":
          $ref: "#/components/responses/Unauthorized"                  
        "403":
          $ref: "#/components/responses/Forbidden"                  
        "404":
          $ref: "#/components/responses/NotFound"                  
        "500":
          $ref: "#/components/responses/InternalError"                  
        "default":
          $ref: "#/components/responses/default"                  

components:
  schemas:
    Product:
      type: object
      required:
        - name
        - price
        - product_id
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
          description: Уникальный идентификатор
        name:
          type: string
          example: Автомобиль
          minLength: 1
          maxLength : 15
          description: Название товара, максимум 15 символов
        price:
          type: number
          format: float
          example: 50.00
          minimum: 0
          description: Цена товара, неотрицательное число с точностью до двух знаков после запятой

    ProductInput:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          example: Автомобиль
          minLength: 1
          maxLength : 15  
          description: Название товара, максимум 15 символов
        price:
          type: number
          format: float
          example: 50.00
          minimum: 0
          description: Цена товара, неотрицательное число с точностью до двух знаков после запятой

    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"

    Error:
      type: object
      required:
        - code
        - message
        - timestamp        
      properties:
        code:
          type: integer
          example: 400
          description: Код ошибки
        message:
          type: string
          example: Некорректные данные
          description: Описание ошибки
        timestamp:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
          description: Время ошибки

  responses:
    BadRequest:
      description: Некорректный запрос
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Требуется авторизация
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden:
      description: Доступ запрещён
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    InternalError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
           $ref: "#/components/schemas/Error"

    default:
      description: Неожиданная ошибка
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"